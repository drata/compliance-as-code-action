{"version":3,"file":"fileService.js","sourceRoot":"","sources":["../../src/services/fileService.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,6CAI0B;AAC1B,oDAAsC;AACtC,uCAAyB;AAGzB,MAAa,WAAW;IACf,KAAK,CAAC,qBAAqB,CAChC,SAAiB,EACjB,OAAe,EACf,qBAA6B;QAE7B,IAAI,OAAO,CAAC,KAAK,EAAE,OAAO,EAAE,MAAM,EAAE,EAAE;YACpC,IAAI,CAAC,IAAI,CAAC,wCAAwC,SAAS,EAAE,CAAC,CAAC;YAE/D,IAAI,CAAC;gBACH,IAAI,WAAW,GAAG,IAAA,oCAA2B,EAAC,SAAS,CAAC,CAAC;gBACzD,IAAI,CAAC,WAAW,EAAE,CAAC;oBAEjB,IAAI,CAAC,IAAI,CAAC,0CAA0C,CAAC,CAAC;gBACxD,CAAC;gBAED,IAAA,yBAAgB,EAAC,SAAS,EAAE,OAAO,EAAE,qBAAqB,CAAC,CAAC;gBAC5D,OAAO,CAAC,IAAI,CAAC,CAAC;YAChB,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,IAAI,CAAC,IAAI,CAAC,qCAAqC,KAAK,EAAE,CAAC,CAAC;gBACxD,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;YAChC,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAEO,KAAK,CAAC,0BAA0B,CACtC,YAAoB,EACpB,WAAqB;QAErB,MAAM,GAAG,GAAG,MAAM,EAAE,CAAC,QAAQ,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;QACpD,IAAI,KAAK,EAAE,MAAM,MAAM,IAAI,GAAG,EAAE,CAAC;YAC/B,MAAM,UAAU,GAAG,GAAG,YAAY,IAAI,MAAM,CAAC,IAAI,EAAE,CAAC;YACpD,IAAI,IAAA,oCAA2B,EAAC,UAAU,CAAC,EAAE,CAAC;gBAC5C,IAAI,MAAM,CAAC,IAAI,KAAK,SAAS,IAAI,MAAM,CAAC,IAAI,KAAK,MAAM,EAAE,CAAC;oBACxD,MAAM,IAAI,CAAC,0BAA0B,CAAC,UAAU,EAAE,WAAW,CAAC,CAAC;gBACjE,CAAC;YACH,CAAC;iBAAM,CAAC;gBACN,IAAI,IAAA,2BAAkB,EAAC,UAAU,CAAC;oBAAE,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YACnE,CAAC;QACH,CAAC;QACD,OAAO,WAAW,CAAC;IACrB,CAAC;CACF;AA1CD,kCA0CC","sourcesContent":["import {\n  checkIfPathIsValidDirectory,\n  isValidIaCFileType,\n  zipFilesFromPath,\n} from \"src/utils/fileio\";\nimport * as core from \"@actions/core\";\nimport * as fs from \"fs\";\nimport * as path from \"path\";\n\nexport class FileService {\n  public async zipFilesFromWorkspace(\n    workspace: string,\n    zipPath: string,\n    includeFileExtensions: string,\n  ): Promise<any> {\n    new Promise(async (resolve, reject) => {\n      core.info(` Identifying IaC files in workspace: ${workspace}`);\n\n      try {\n        let isDirectory = checkIfPathIsValidDirectory(workspace);\n        if (!isDirectory) {\n          // not a directory\n          core.info(\"Error: workspace path is not a directory\");\n        }\n\n        zipFilesFromPath(workspace, zipPath, includeFileExtensions);\n        resolve(true);\n      } catch (error) {\n        core.info(`Error compressing files for scan: ${error}`);\n        reject(JSON.stringify(error));\n      }\n    });\n  }\n\n  private async getInfraFilesFromDirectory(\n    locationPath: string,\n    zipFileList: string[],\n  ): Promise<string[]> {\n    const dir = await fs.promises.opendir(locationPath);\n    for await (const dirent of dir) {\n      const joinedPath = `${locationPath}/${dirent.name}`;\n      if (checkIfPathIsValidDirectory(joinedPath)) {\n        if (dirent.name !== \".github\" && dirent.name !== \".git\") {\n          await this.getInfraFilesFromDirectory(joinedPath, zipFileList);\n        }\n      } else {\n        if (isValidIaCFileType(joinedPath)) zipFileList.push(joinedPath);\n      }\n    }\n    return zipFileList;\n  }\n}\n"]}