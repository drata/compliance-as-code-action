{"version":3,"file":"configuration.js","sourceRoot":"","sources":["../../src/utils/configuration.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,oDAAsC;AAMtC,MAAa,aAAa;IACjB,YAAY,CAA2B;IAE9C;QACE,IAAI,CAAC,YAAY,GAAG;YAClB,WAAW,EAAE,GAAG;YAChB,cAAc,EAAE,IAAI;YACpB,cAAc,EAAE,GAAG;YACnB,MAAM,EAAE,IAAI;YACZ,WAAW,EAAE,UAAU;YACvB,MAAM,EAAE,EAAE;YACV,WAAW,EAAE,YAAY;SAC1B,CAAC;IACJ,CAAC;IAEM,kCAAkC;QACvC,IAAI,MAAM,GAAG,EAAE,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,yBAAyB,EAAE,CAAC;QACnE,IAAI,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC,iBAAiB,IAAI,YAAY,CAAC;QACxD,IAAI,CAAC,IAAI,CAAC,iDAAiD,CAAC,CAAC;QAE7D,MAAM,EAAE,GAAW,IAAI,CAAC,QAAQ,CAAC,iBAAiB,CAAC,CAAC;QACpD,MAAM,WAAW,GAAW,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC;QACzD,MAAM,OAAO,GACX,CAAC,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,IAAI,MAAM,CAAC,IAAI,MAAM,CAAC;QACxD,MAAM,MAAM,GAAW,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,IAAI,CAAC;QACvD,MAAM,OAAO,GAAW,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,IAAI,KAAK,CAAC,CAAC;QAEpE,IACE,CAAC,OAAO,CAAC,GAAG,CAAC,iBAAiB;YAC9B,CAAC,OAAO,CAAC,GAAG,CAAC,eAAe;YAC5B,CAAC,WAAW;YACZ,CAAC,MAAM,EACP,CAAC;YACD,MAAM,CAAC,OAAO,GAAG,KAAK,CAAC;YACvB,MAAM,CAAC,OAAO;gBACZ,sHAAsH,CAAC;QAC3H,CAAC;aAAM,CAAC;YACN,IAAI,CAAC,YAAY,GAAG;gBAClB,WAAW,EAAE,WAAW;gBACxB,cAAc,EAAE,OAAO;gBACvB,cAAc,EAAE,OAAO;gBACvB,MAAM,EAAE,MAAM;gBACd,WAAW,EAAE,EAAE;gBACf,MAAM,EAAE,OAAO,CAAC,GAAG,CAAC,eAAe;gBACnC,WAAW,EAAE,GAAG;aACjB,CAAC;QACJ,CAAC;QAED,OAAO,MAAM,CAAC;IAChB,CAAC;CACF;AAlDD,sCAkDC","sourcesContent":["import * as core from \"@actions/core\";\nimport { log } from \"console\";\nimport { ActionConfig } from \"@src/models/actionConfig\";\nimport { ConfigurationStatus } from \"@src/models/configurationStatus\";\n// import { RegionType } from '@src/models/region'\n\nexport class Configuration {\n  public configParams: ActionConfig | undefined;\n\n  public constructor() {\n    this.configParams = {\n      workspaceId: \"1\",\n      verboseLogging: true,\n      timeoutSeconds: 600,\n      region: \"US\",\n      maxSeverity: \"Critical\",\n      apiKey: \"\",\n      environment: \"production\",\n    };\n  }\n\n  public checkIfActionIsConfiguredCorrectly(): ConfigurationStatus {\n    let status = { isValid: true, message: \"Configuration is valid.\" };\n    let env = process.env.DRATA_ENVIRONMENT || \"production\";\n    core.info(\"Checking if the action is configured correctly.\");\n\n    const ms: string = core.getInput(\"minimumSeverity\");\n    const workspaceId: string = core.getInput(\"workspaceId\");\n    const logging: boolean =\n      (core.getInput(\"verboseLogging\") || \"true\") == \"true\";\n    const region: string = core.getInput(\"region\") || \"US\";\n    const timeout: number = +(core.getInput(\"timeoutSeconds\") || \"600\");\n\n    if (\n      !process.env.GITHUB_REPOSITORY ||\n      !process.env.DRATA_API_TOKEN ||\n      !workspaceId ||\n      !region\n    ) {\n      status.isValid = false;\n      status.message =\n        \"Action is missing required configuration. Check to ensure that region and workspaceId are specified in the workflow.\";\n    } else {\n      this.configParams = {\n        workspaceId: workspaceId,\n        verboseLogging: logging,\n        timeoutSeconds: timeout,\n        region: region,\n        maxSeverity: ms,\n        apiKey: process.env.DRATA_API_TOKEN,\n        environment: env,\n      };\n    }\n\n    return status;\n  }\n}\n"]}